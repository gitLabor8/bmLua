# Introduction

Lua is a scripting language often used in game engines. It is somewhat similar
to Python, but less advanced. One of the more interesting features it supports
is coroutines. Coroutines are similar to threads in the sense that they each
have their own execution context. They can run separately from each other, but
unlike threads, coroutines cannot run in parallel. Coroutines must be explicitly
resumed in order for them to run, and once they run, they must explicitly yield
to let the caller run again. Every time a resume or yield happens, data can be
passed along, which allows coroutines to communicate with each other.

In this article, we're going to define structural operational semantics for
coroutines in Lua. We'll restrict ourselves to a small subset of Lua in order to
focus on the concept of coroutines. Before we move on to the theory, let's have
a look at an example of Lua code using coroutines.

## Example code

import(example.tex)

# Syntax

syntax()

# Semantics

## Values

% We define the usual boolean operations on false() and true()

## State
import(state.tex)

## Expressions

\[eval(lambda(a, B), s) = (s, a, B)\]

## Simple rules

semantics(empty)

semantics(comp_1)
semantics(comp_2)

semantics(ass)

semantics(if_true)
semantics(if_false)

semantics(while)

## Function rules

semantics(call_ret)
semantics(call_nil)

## Coroutine rules

semantics(wrap)\\
The wrap-rule binds a function to a coroutine. The function itself will not be executed yet.\\

The resume rule resumes a coroutine. The index $_O$ refers to the outside of the coroutine, while the index $_I$ refers to the inside of the coroutine. The rule takes the argument $a_O$ and instantiates the variable $r_I$ with it. Next, the blo
After the resume, there are three cases of syntax that can be encountered to end the resume:
semantics(resume_yield)\\


semantics(resume_ret)
semantics(resume_nil)

# Analysis
