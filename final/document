# Introduction

Lua is a scripting language often used in game engines. It is somewhat similar
to Python, but less advanced. One of the more interesting features it supports
is coroutines. Coroutines are similar to threads in the sense that they each
have their own execution context. They can run separately from each other, but
unlike threads, coroutines cannot run in parallel. Coroutines must be explicitly
resumed in order for them to run, and once they run, they must explicitly yield
to let the caller run again. Every time a resume or yield happens, data can be
passed along, which allows coroutines to communicate with each other.

In this article, we're going to define structural operational semantics for
coroutines in Lua. We'll restrict ourselves to a small subset of Lua in order to
focus on the concept of coroutines. Before we move on to the theory, let's have
a look at an example of Lua code using coroutines.

## Example code

\lstinputlisting[language={[5.0]Lua}]{code.lua}
noscript(
\texttt{co = coroutine.wrap(indec)} only creates the coroutine, it does not
start it. When \texttt{it0=co(false)} is called, the coroutine starts with
\texttt{x=false}. The coroutine then enters the while-loop, and because
\texttt{x=false} the program only executes the line
\texttt{pointer=pointer+delta} which gives the variable \texttt{pointer} the
value 1. When \texttt{coroutine.yield(pointer)} is executed, the coroutine
yields and returns the value from \texttt{pointer}. This gives the varablie
\texttt{it0} the value 1. Then \texttt{it1 = co(false)} will be executed. This
will resume the coroutine with \texttt{x=false}. The coroutine resumes where it
left off, which is in the while-loop. Because \texttt{x} is \texttt{false} the
coroutine will again only execute \texttt{pointer=pointer+delta}, which will
return the coroutine with the value of \texttt{pointer}, which is 2. This will
lead to \texttt{it1=2}. Then the coroutine is resumed with \texttt{true} in the
while-loop. Because it is resumed with \texttt{true}, \texttt{delta = delta *
(-1)} will be executed, giving \texttt{delta} the value of \texttt{-1}. After
this, \texttt{pointer=pointer + delta} will be executed. Lastly, the coroutine
will yield with \texttt{pointer=1}, giving \texttt{it2} the value of \texttt{1}.
)
# Syntax

syntax()

# Semantics

## Values

% We define the usual boolean operations on false() and true()

## State
$L(v) = {v | v = Var}$\\
L(v) is a set with local variables. It will contain all our normal variables, these are nil, bools and numbers.\\
$G(v) = {v | v = Var}$\\
G(v) is a set with global variables. It will contain all the coroutinetuples.\\
$ref_N = Ref$\\
ref_N is the next free referencevalue. These will be used to identify coroutines.\\
\\
$\text{s} =  (\langle \text{var} \rangle \to \text{Val} \cup \text{Ref, Ref} \to \text{Val, Ref})$ \\
The state s is a tuple that contains the locals, globals and the next free referencenumber.\\
$\text{Ref} = \{\text{ref}_n | n\in \mathbb{N}\} \\$
References are natural numbers.
$\text{new} = ( x\mapsto \text{nil}, x\mapsto \text{nil}, \text{ref}_O) \\$
new instantiates a state with nil values.
$\text{Nil} = \{\text{nil}\} \\$
nil is the set consisting of the nil element.
$\text{get((L,G,ref}_N\text{), v)} =    \begin{cases} \text{G(L(v))} \text{ if } L(v)\in \text{Ref} \\
                    \text{L(v)} & \text{ else } \\ \end{cases}\\$
The get-function takes a state and a variablename and looks it up in the collection of locals.\\
$\text{merge((L_1,G_1}\text{ref}_{N_1}\text{),(L_2,G_2,}\text{ref}_{N_2}\text{)} =  \text{(L_1,G_2,max(ref}_{N_1},\text{ref}_{N_2})) \\$
Merge combines two states. It takes the locals of the first state and the globals of the second state. Lastly, it takes the maximum of the two reference numbers, to ensure that this number isn't used as identifier yet.\\
$\text{let((L,G,ref}_N\text{),v, x)} =\Big(\Big( v'\mapsto 
\begin{cases}
\text{x} \text{ if } v=v'\\
\text{L(v')} \text{ else} \\
\end{cases}\Big), \text{G,ref}_N\Big)\\$
The let-function assigns a value x to a variable v in the set of locals of the given state.\\
$\text{set((L,G,ref}_N\text{), v, c)} = \Big(L,\Big(r \mapsto 
\begin{cases}
\text{x}  \text{ if } \text{L(v)} = \text{r} \\
\text{G(r)}  \text{ else } \\
\end{cases}\Big),\text{ref}_N\Big)\\$
The set-function assigns a value x to a variable v in the set of globals of the given state.\\
$\text{def((L,G,ref}_N\text{),v,x)} =  \Big(\Big(v' \mapsto 
\begin{cases}
\text{ref}_N  \text{ if } \text{v'=v} \\
\text{L(v')}  \text{ else} \\ 
\end{cases} \Big),\Big( \text{r}\mapsto
\begin{cases}
\text{x} \text{ if } \text{r}=\text{ref}_N\\
\text{G(r)} \text{ else} \\
\end{cases}\Big), \text{ref}_{N+1}\Big) \\$
Def saves a coroutine in the current state. For this, it creates a reference with variablename v and value $ref_N$ to the coroutine in the set of locals. It also saves the coroutine x in the set of globals with the reference $ref_N$. Lastly, it heightens up the next free referencevalue by one.\\
The coroutine is now saved within the set of globals with a unique referencevalue and can be accessed by looking up this referencevalue in the set of locals.\\


## Expressions

## Simple rules

semantics(empty)

semantics(comp_1)
semantics(comp_2)

semantics(ass)

semantics(if_true)
semantics(if_false)

semantics(while)

## Function rules

## Coroutine rules

semantics(wrap)

semantics(resume_yield)
semantics(resume_ret)
semantics(resume_nil)

# Analysis
