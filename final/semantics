
empty:
ssis(empty(), s, s)

comp_1:
justifies(
ssiss(S, s, S', s'),
ssiss(block(S, B), s, block(S', B), s'))

comp_2:
justifies(
ssis(S, s, s'),
ssiss(block(S, B), s, B, s'))

ass:
ssis(assign(v, e), s, let(s, v, eval(e, s)))

if_true:
when(ssiss(if(b, B_1, B_2), s, B_1, s), eval(b, s))

if_false:
when(ssiss(if(b, B_1, B_2), s, B_2, s), \neg eval(b, s))

while:
ssiss(while(b, B), s, if(b, block(B, while(b, B)), empty()), s)

call_ret:
where(when(justifies(
ssirss(B_I, s_I', ret(a_I), s_I''),
ssis(call(r_O, f, a_O), s_O, s_O')),
get(s_O, f) \in Fn),
(s_I, r_I, B_I) = get(s_O, f),
s_I' = let(merge(s_I, s_O), r_I, eval(a_O, s_O)),
s_O' = let(merge(s_O, s_I''), r_O, eval(a_I, s_I'')))

call_nil:
where(when(justifies(
ssirs(B_I, s_I', s_I''),
ssis(call(r_O, f, a_O), s_O, s_O')),
get(s_O, f) \in Fn),
(s_I, r_I, B_I) = get(s_O, f),
s_I' = let(merge(s_I, s_O), r_I, eval(a_O, s_O)),
s_O' = let(merge(s_O, s_I''), r_O, nil()))

wrap:
where(
ssis(cowrap(c, f), s, def(s, c, (s_f, v_f, B_f))),
(s_f, v_f, B_f) = eval(f, s))

resume_yield:
where(when(justifies(
ssirss(B_I, s_I', block(coyield(r_I', a_I), B_I'), s_I''),
ssiss(block(call(r_O, c, a_O), B_I), s_O, B_O, s_O')),
get(s_O, c) \in Co),
(s_I, r_I, B_I) = get(s_O, c),
s_I' = let(merge(s_I, s_O), r_I, eval(a_O, s_O)),
s_O' = let(set(merge(s_O, s_I''), c, (s_I'', r_I', B_I')),
    r_O, eval(a_I, s_I'')))

resume_ret:
where(when(justifies(
ssirss(B_I, s_I', ret(a_I), s_I''),
ssiss(block(call(r_O, c, a_O), B_I), s_O, B_O, s_O')),
get(s_O, c) \in Co),
(s_I, r_I, B_I) = get(s_O, c),
s_I' = let(merge(s_I, s_O), r_I, eval(a_O, s_O)),
s_O' = let(set(merge(s_O, s_I''), c, nil()), r_O, eval(a_I, s_I'')))

resume_nil:
where(when(justifies(
ssirs(B_I, s_I', s_I''),
ssiss(block(call(r_O, c, a_O), B_I), s_O, B_O, s_O')),
get(s_O, c) \in Co),
(s_I, r_I, B_I) = get(s_O, c),
s_O' = let(set(merge(s_O, s_I''), c, nil()), r_O, nil()))

